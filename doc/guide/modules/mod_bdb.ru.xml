<?xml version="1.0"?>
<!DOCTYPE manualpage SYSTEM "../style/dtd/manual.dtd">

<?xml-stylesheet type="text/xsl" href="../style/xsl/manual.ru.xsl"?>

<manualpage metafile="mod_bdb.xml.meta" lang="ru">

<title>Модуль dbp_bdb</title>

<summary>
	Этот раздел посвящен модулю расширения возможностей языка dbPager средствами
	доступа к хранилищам данных на основе Oracle Berkeley DB &mdash; dbp_bdb.
</summary>

<section id="overview">
	<title>Введение</title>
	<p>Хранилище Berkeley DB представляет собой высокопроизводительную
	базу данных. В отличие от классических реляционных СУБД, подразумевающих
	использование языка SQL для операций над данными, это хранилище основано
	на принципе организации данных как пары "ключ-значение". Подобный принцип
	организации хранения данных позволяет достичь впечатляющей
	производительности в случае, когда необходимо хранить слабоструктурированные
	данные, которые могут быть идентифицированы с помощью уникального имени
	(ключа). В настоящее время это популярный способ хранения данных в
	web-среде (базы данных NoSQL).
	</p>
	<p>Модуль <term>dbp_bdb</term> после его установки и регистрации в
		системе предоставляет в распоряжение разработчика несколько тегов
		для работы с хранилищами данных на основе Berkeley DB.
		Эти теги регистрируются
		в пространстве имен <term>http://dbpager.org.ru/schemas/dbp/3.0/bdb</term>.
		В дальнейшем, при описании тегов модуля, мы будем подразумевать, что
		псевдоним пространства имен определен как <term>bdb.</term></p>
	<p>Работа с хранилищем сводится к подключению к хранилищу,
		получению или записи данных по ключу, что подробно будет
		рассмотрено далее.</p>
</section>

<section id="storage">
	<title>Подключение к хранилищу данных</title>
	<p>Для подключения к хранилищу данных используется
		тег <term>bdb:storage</term>:</p>
	<code>&lt;bdb:storage <param>href="<value>имя файла</value>"</param> [<param>id=<value>имя</value></param>]></code>
	<p>Обязательный параметр <param>href</param>
		определяет имя файла хранилища данных.</p>
	<p>Необязательный параметр <param>id</param> &mdash; определяет синоним имени
		хранилища. Используется в том случае, когда необходимо одновременно
		работать с несколькими хранилищами. Если параметр не определен,
		то считается что данное подключение к хранилищу является
		текущим по умолчанию.</p>
	<p>В случае, если файл хранилища, указанный параметром href, не существует, то он
		будет создан.</p>
	<p>В случае, если подключение к хранилищу будет произведено успешно,
		выполняются все вложенные в <term>bdb:storage</term> теги; в противном
		случае генерируется программное исключение.</p>
	<example>
		<title>подключение к хранилищу данных</title>
		<comment>
			<p>В данном примере создается подключение к двум хранилищам
			данных &mdash; options.db и docs.db. Предполагается, что хранилище
			options.db содержит данные о языке по умолчанию &mdash;
			пару "language.default"-"en", а хранилище docs.db &mdash;
			статьи на разных языках &mdash;
			пары "article.статья.язык"-"текст статьи".</p>
		</comment>
		<input>&lt;bdb:storage href="../data/options.db">
  &lt;bdb:storage id="docs" href="../data/docs.db">
    &lt;dbp:var name="lang"&gt;
      &lt;dbp:set name="lang"&gt;
        &lt;bdb:get name="language.default"/&gt;
      &lt;/dbp:set&gt;
      &lt;bdb:get name="article.index.{$lang}" storage="docs"/&gt;
    &lt;/dbp:var&gt;
  &lt;/bdb:storage>
&lt;/bdb:storage></input>
		<output>&lt;p>This is an article on english language&lt;/p></output>
	</example>
</section>

<section id="get">
	<title>Получение данных</title>
	<p>Для извлечения данных из хранилища по ключу используется тег
		<term>bdb:get</term>:</p>
	<code>&lt;bdb:get <param>name="<value>ключ</value>"</param> [<param>storage</param>="<value>имя</value>"]></code>
	<p>Тег bdb:get должен быть вложен в тег bdb:storage.</p>
	<p>Обязательный параметр тега, <param>name</param>, определяет имя ключа,
		с которым ассоциированы данные в хранилище.</p>
	<p>Необязательный параметр <param>storage</param> определяет синоним имени
		хранилища, из которого будут извлекаться данные. Если параметр не
		определен, считается, что операция будет произведена в хранилище
		по умолчанию (с неопределенным	параметром id).</p>
	<p>При успешном выполнении выполняются все вложенные теги и в выходной
		поток помещается строка с значением найденной по ключу пары данных.
		В случае ошибки генерируется программное исключение.</p>
	<p>В вышеприведенном примере "подключение к хранилищу данных"
		демонстрируется использование тега bdb:get для получения данных
		из хранилища по ключу "language.default", после
		чего найденное значение ключа (допустим, "en") присваивается
		переменной lang.
		Во втором случае, значение, найденное по ключу "article.index.en"
		выводится в выходной поток, таким образом получая результат.</p>
</section>

<section id="set">
	<title>Сохранение данных</title>
	<p>Для добавления данных в хранилище или редактирования уже существующих
		данных, используется тег <term>bdb:set</term>:</p>
	<code>&lt;bdb:set <param>name="<value>ключ</value>"</param> [<param>storage</param>="<value>имя</value>"]>значение&lt;/bdb:set&gt;</code>
	<p>Тег bdb:set должен быть вложен в тег bdb:storage.</p>
	<p>Обязательный параметр тега, <param>name</param>, определяет имя ключа,
		с которым ассоциированы данные в хранилище.</p>
	<p>Необязательный параметр <param>storage</param> определяет синоним имени
		хранилища, из которого будут извлекаться данные. Если параметр не
		определен, считается, что операция будет произведена в хранилище
		по умолчанию (с неопределенным	параметром id).</p>
	<p>При успешном выполнении тега в хранилище добавляется новая пара
		"ключ"-"данные", где в качестве ключа используется значение параметра
		name, а в качестве ассоциированных данных &mdash; содержимое входного
		потока, образуещегося при выполнении вложенных тегов. В случае,
		если в хранилище уже имеются данные с таким-же ключом, производится
		обновление существующих данных. В случае возникновение ошибки
		генерируется программное исключение.</p>
	<example>
		<title>Импорт текстового файла в хранилище данных</title>
		<comment>
			<p>В данном примере в хранилище ../data/docs.db импортируются
			данные из текстового файла в формате:
			<code>ключ1=значение
ключ2=значение
...
ключN=значение</code>
			</p>
			<p>Сначала файл считывается и присваивается переменной file.
			После чего, содержимое переменной file сначала делится на строки,
			после чего каждая строка делится на пару ключ=значение, которые
			присваиваются переменным key и value. После этого происходит
			запись данных из этих переменных в хранилище.</p>
		</comment>
		<input>&lt;bdb:storage href="../data/docs.db">
  &lt;dbp:var name="file"&gt;
    &lt;dbp:set name="file"&gt;
      &lt;dbp:read href="import.txt"/&gt;
    &lt;/dbp:set&gt;
    &lt;dbp:split name="line" value="{$file}" separator="{byte(13)}"&gt;
      &lt;dbp:split name="key,value" value="{$line}" separator="="&gt;
        Import {$key}...{byte(13)}
        &lt;bdb:set name="{$key}"&gt;{$value}&lt;/bdb:set&gt;
      &lt;/dbp:split&gt;
    &lt;/dbp:split&gt;
  &lt;/dbp:var&gt;
&lt;/bdb:storage></input>
	<output>Import ключ1...
Import ключ2...
Import ключN...</output>
	</example>
</section>

<section id="find">
	<title>Поиск данных</title>
	<p>Для поиска данных в хранилище по заданной части имени ключа используется
		тег <term>bdb:find</term>:</p>
	<code>&lt;bdb:find <param>name="<value>ключ</value>"</param> [<param>storage</param>="<value>имя</value>"]></code>
	<p>Тег bdb:find должен быть вложен в тег bdb:storage.</p>
	<p>Обязательный параметр тега, <param>name</param>, определяет часть
		имени ключа, с которой должно начинаться имя ключа данных в хранилище.</p>
	<p>Необязательный параметр <param>storage</param> определяет синоним имени
		хранилища, из которого будут извлекаться данные. Если параметр не
		определен, считается, что операция будет произведена в хранилище
		по умолчанию (с неопределенным	параметром id).</p>
	<p>При выполнении производится поиск пар "ключ"-"значение" с именами ключей,
		начинающихся со строки, заданной параметром <param>name</param>.
		Для каждого найденного ключа переменные <term>key</term> и <term>value</term> инициалируются
		именем ключа и данными, соответствующими этому ключу, после чего
		выполняются все вложенные теги. В случае ошибки генерируется
		программное исключение.</p>
	<example>
		<title>Дамп хранилища данных</title>
		<comment>
			<p>В данном примере все содержимое хранилища ../data/docs.db
				выводится в поток вывода.</p>
		</comment>
		<input>&lt;bdb:storage href="../data/docs.db">
  &lt;bdb:find name=""&gt;
    {$key}={$value}{byte(13)}
  &lt;/bdb:find&gt;
&lt;/bdb:storage></input>
	<output>ключ1=значение
ключ2=значение
ключN=значение</output>
	</example>
</section>

<section id="del">
	<title>Удаление данных</title>
	<p>Для удаления данных из хранилища используется тег
		<term>bdb:delete</term>:</p>
	<code>&lt;bdb:delete <param>name="<value>ключ</value>"</param> [<param>storage</param>="<value>имя</value>"]></code>
	<p>Тег bdb:delete должен быть вложен в тег bdb:storage.</p>
	<p>Обязательный параметр тега, <param>name</param>, определяет имя ключа,
		с которым ассоциированы данные в хранилище.</p>
	<p>Необязательный параметр <param>storage</param> определяет синоним имени
		хранилища, из которого будут удаляться данные. Если параметр не
		определен, считается, что операция будет произведена в хранилище
		по умолчанию (с неопределенным	параметром id).</p>
	<p>При успешном выполнении из хранилища производится удаление данных,
		ассоциированных с заданным ключом, после чего
		выполняются все вложенные теги. В случае ошибки генерируется
		программное исключение.</p>
</section>

<section id="references">
	<title>Ссылки</title>
	<p><link to="http://www.oracle.com/database/berkeley-db/">Домашняя
		страница Oracle Berkeley DB</link></p>
	<p><link to="http://en.wikipedia.org/wiki/NoSQL">NoSQL
		на Wikipedia</link></p>
</section>

</manualpage>
