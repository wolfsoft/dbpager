<?xml version="1.0"?>
<!DOCTYPE manualpage SYSTEM "../style/dtd/manual.dtd">

<?xml-stylesheet type="text/xsl" href="../style/xsl/manual.ru.xsl"?>

<manualpage metafile="lang_overview.xml.meta" lang="ru" version="2010062501">

<title>Обзор языка</title>

<summary>
	Эта глава посвящена обзору языка программирования dbPager: причины
	возникновения, особенности по сравнению с другими языками
	программирования, а также рассмотрению структуры программы на
	языке dbPager на примере простейшей программы.
</summary>

<section id="header">
	<title>Предпосылки появления языка dbPager</title>
	<p>Язык dbPager появился в результате необходимости в сжатые сроки
		решать задачи по динамической генерации HTML-страниц для
		интерактивных web-сайтов.
		Для выполнения этих задач требовался инструмент быстрой разработки
		типовых шаблонов сайтов, доступный для освоения даже web-дизайнером,
		знающим языки разметки, но не знакомым с языками программирования.
		Такая простота позволила бы эффективно разделить труд web-дизайнера и
		программиста над одним проектом. Кроме того, этот
		инструмент должен был обладать возможностями расширения
		предоставляемого им функционала программистом в случае необходимости.</p>
	<p>Для выполнения поставленных условий рассматривались типичные общепринятые варианты
		решения такого рода задач. Все имеющиеся многочисленные средства можно
		было разделить на категории по принципу, используемом в них для
		генерации динамических страниц:</p>
	<list>
		<item>Статичиские HTML-страницы содержат вставки программного кода,
			генерирующего динамическую часть страницы. Примерами подобного
			подхода являются такие языки, как PHP и ASP.</item>
		<item>Программный код с помощью операций вывода полностью динамически
			генерирует содержимое HTML-страницы. Ярким примером этого подхода
			являются языки Perl и Python.</item>
		<item>СУБД содержит всю необходимую для генерации web-страницы логику,
		основанную на собственных средствах (например, хранимых процедурах).
		Web-сервер с поддержкой трансляции HTTP-запросов к СУБД представляет
		результаты её выполнения в виде динамически сформированных данных в XML
		формате, которые подвергаются последующей трансформации с помощью
		XSL-преобразований в HTML-страницу. Примером подобного подхода может
		служить интеграция MS SQL Server и Microsoft IIS.</item>
	</list>
	<p>Предлагаемые способы решения поставленных задач имеют свои преимущества
		и недостатки. Первый подход не позволяет разделить работу программиста
		и web-дизайнера, вынуждая web-дизайнера изучать программирование. Второй
		подход также не позволяет web-дизайнеру и программисту разделить свои
		обязанности и вынуждает программиста заниматься web-дизайном. Третий
		подход предполагает привлечение еще и программиста СУБД, слабо расширяем
		и довольно функционально ограничен. Как следствие, существует большой
		сегмент решений конкретных прикладных задач
		(<link to="http://en.wikipedia.org/wiki/Web_application_framework">web
		application framework</link>), которые, тем не менее, не обладают
		необходимой универсальностью и зачастую сложны в освоении.</p>
	<p>Технология <link to="http://ru.wikipedia.org/wiki/XSLT">XSL-трансформации</link>
		по большей части лишена этих недостатков, позволяя отделить информацию
		от её представления. Путем предварительного согласования XML-формата передачи
		данных между программистом и web-дизайнером производится паралельная
		работа над web-дизайном в виде файлов трансформации XSL и
		программным ядром системы, генерирующим XML-представление данных.
		Проблема была в том, что подобного универсального ядра не существовало,
		поэтому и появился сервер приложений dbPager Server и язык,
		описывающий логику работы приложения, выполняющегося в его среде.
		Язык претерпел множество изменений и в настоящее время является
		полноценным языком программирования для решения широкого круга задач
		по эффективной динамической генерации XML, JSON или HTML кода,
		сочетая простоту и широкие возможности.</p>
</section>

<section id="features">
	<title>Особенности языка</title>
	<p>Язык dbPager является мультипарадигменным языком программирования, в
		котором можно сочетать как императивный стиль программирования,
		так и декларативный и функциональный стили. Синтаксис языка основан
		на <link to="http://www.w3.org/TR/1998/REC-xml-19980210">XML</link> и
		несколько напоминает синтаксис языков
		<link to="http://www.w3.org/TR/xsl">XSL</link> и
		<link to="http://ru.wikipedia.org/wiki/JSTL">JSTL</link>, но не
		более того.
		Как и в этих языках, программа на языке dbPager представляет собой конформный
		XML-документ, корректность которого можно проверить с помощью широко
		используемых средств проверки соответствия XML-документа его схеме
		ещё до выполнения программы.</p>
	<p>Основной синтаксический элемент программы на языке dbPager &mdash; <term>тег</term>.
		Понятие тега идентично понятию элемента в языке XML. По
		своей функциональности он соответствует функциям в других
		языках программирования. Как и функция, тег принимает в
		качестве параметров аргументы, соответствующие атрибутам в языке XML.
		Кроме того, тег может содержать вложенные теги и текст. Тег &mdash; это
		единица исполнения программы; в зависимости от его назначения, выполнение
		тега приводит к соответствующим результатам.</p>
	<image src="language-tag.png"/>
	<p>(1 &mdash; имя тега; 2,3 &mdash; параметры; 4 &mdash; конец тега;
		5 &mdash; содержимое тега)</p>
	<p>Программа на языке dbPager представляет собой
		иерархическую структуру, состоящую из тегов, вложенных друг в друга.
		Визуально программа может быть представлена как дерево:</p>
	<image src="program-diagram.png"/>
	<subtitle>Выполнение программы</subtitle>
	<p>Выполнение программы происходит следующим образом. Теги исполняются
		последовательно, один за другим. При выполнении тега сначала
		выполняются все вложенные в него теги и только после этого происходит
		выполнение следующего тега. На рисунке цифрами обозначен порядок
		его выполнения.</p>
	<p>Каждый тег, помимо собственных параметров, имеет поток входа и
		поток выхода данных. Тег может содержать вложенный текст, который
		поступает во входной поток данных. Кроме этого, тег может
		сам генерировать какие-либо данные. В результате выполнения тега
		эти данные после обработки передаются в выходной поток тега.
		Каждый выходной поток данных тега является входным
		потоком данных родительского тега, таким образом тег может также
		манипулировать результатами выполнения вложенных в него тегов.
		Результатом работы программы вцелом является содержимое выходного потока
		корневого тега.</p>
	<p>В примере программы, представленной выше, два тега (3 и 4) содержат
	    вложенный текст (<term>z = {$z}</term>); прочие теги вложенного
		текста не содержат.
		В процессе выполнения последовательно выполняются теги 1, 2, 3 и 4.
		Тег (3) помещает в свой выходной поток строку <term>z = 6</term>,
		а тег (4) &mdash; строку <term>z = 9</term>. Эти строки поступают
		во входной поток данных их родительского тега (2), который, в свою
		очередь, помещает полученную строку <term>z = 6z = 9</term> в свой
		выходной поток. Далее строка поступает по входной поток тега (1).
		Этот тег является корневым, и в результате эта строка становится
		результатом выполнения программы.</p>
	<subtitle>Пространства имен</subtitle>
	<p>Для того, чтобы соотнести теги с функцией, которую они выполняют и
		избежать проблемы совпадения имен тегов (коллизий) используется
		механизм <link to="http://www.w3.org/TR/REC-xml-names">пространства имен XML</link>.
		Теги ядра системы, а также теги внешних модулей регистрируются в
		соответствующих пространствах имен, характеризуемыми уникальными
		адресами <link to="http://www.ietf.org/rfc/rfc2396.txt">URI</link>:</p>
	<table style="single">
		<header>
			<cell>Модуль</cell>
			<cell>URI</cell>
			<cell>Описание</cell>
		</header>
		<row>
			<cell>ядро</cell>
			<cell>http://dbpager.org.ru/schemas/dbp/3.0</cell>
			<cell>Теги системы dbPager Server</cell>
		</row>
		<row>
			<cell>ядро</cell>
			<cell>http://dbpager.org.ru/schemas/dbp/3.0/custom</cell>
			<cell>Теги, определяемые пользователем</cell>
		</row>
		<row>
			<cell>dbp_bdb</cell>
			<cell>http://dbpager.org.ru/schemas/dbp/3.0/bdb</cell>
			<cell>Теги поддержки хранилища данных Berkeley DB</cell>
		</row>
		<row>
			<cell>dbp_odbc</cell>
			<cell>http://dbpager.org.ru/schemas/dbp/3.0/odbc</cell>
			<cell>Теги для работы с базами данных через интерфейс ODBC</cell>
		</row>
	</table>
	<p>Прочие внешние модули могут использовать другие URI &mdash; обратитесь к
		документации к ним.</p>
	<p>Теги, не относящиеся ни к одному из зарегистрированных пространств
		имён, обрабатываются особым образом &mdash; как обычный текст, но в общем
		для всех тегов порядке исполнения.</p>
	<p>В примере программы, приведённой выше, показано, как однозначно определить пространство
		имён для тегов программы: строка <term>xmlns:dbp="http://dbpager.org.ru/schemas/dbp/3.0"</term>
		назначает пространству имен <term>http://dbpager.org.ru/schemas/dbp/3.0</term>
		имя-псевдоним <term>dbp</term>. Таким образом, тег <term>dbp:var</term>
		однозначно определён как функция ядра системы. В результате использования
		различных пространств имён одновременно могут существовать теги с
		одинаковым именем, но несущие разные функции.</p>
	<tip>Удобно определить все используемые пространства имен сразу в корневом
	    теге module &mdash; это повысит читаемость текста программы.</tip>
	<subtitle>Комментарии</subtitle>
	<p>Программа на языке dbPager может содержать комментарии. Комментарии &mdash; блоки текста,
		которые несут информационное значение для разработчика и никак не интерпретируются.
		Кроме чисто справочной функции по коду программы, комментариями удобно использоваться
		при отладке программы, для временного исключения какого-либо блока кода.</p>
	<p>Комментарий начинается с последовательности символов <term>&lt;!--</term> и
	  заканчивается последовательностью символов <term>--&gt;</term>. Вложенные комментарии
	  не допускаются:</p>
	<code>&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;!--
    Это комментарий.
    Он игнорируется при выполнении программы.
--&gt;

&lt;dbp:module
    xmlns:dbp="http://dbpager.org.ru/schemas/dbp/3.0"
    xmlns:usr="http://dbpager.org.ru/schemas/dbp/3.0/custom"
&gt;

&lt;!-- Здесь будет расположен код программы --&gt;

&lt;/dbp:module&gt;</code>
</section>

<section id="byexample">
	<title>Программа на языке dbPager</title>
	<p>Рассмотрим пример простой программы, генерирующей слова песни
		"<link to="http://99-bottles-of-beer.net">99 бутылок пива на стене</link>":</p>
	<code>&lt;?xml version="1.0" encoding="utf-8"?>

&lt;dbp:module
    xmlns:dbp="http://dbpager.org.ru/schemas/dbp/3.0"
    xmlns:usr="http://dbpager.org.ru/schemas/dbp/3.0/custom"
>

&lt;dbp:tag name="sing">
    {$number} bottles of beer on the wall, {$number} bottles of beer.{$crlf}
    Take one down, pass it around, {$number - 1} bottles of beer on the wall.{$crlf}{$crlf}
    &lt;dbp:switch test="{($number - 1) = 0}">
        &lt;dbp:case match="1">
            Go to the store and buy some more,{$crlf}
            99 bottles of beer on the wall.{$crlf}
        &lt;/dbp:case>
        &lt;dbp:case match="0">
            &lt;usr:sing number="{$number - 1}"/>
        &lt;/dbp:case>
    &lt;/dbp:switch>
&lt;/dbp:tag>

&lt;dbp:var name="crlf" value="{byte(13)}{byte(10)}">
    &lt;usr:sing number="99"/>
&lt;/dbp:var>

&lt;/dbp:module></code>
	<p>Текст программы состоит, как минимум, из заголовка:</p>
	<code>&lt;?xml version="1.0" encoding="utf-8"?></code>
	<p>В заголовке можно задать кодировку символов, использующихся в тексте
		программы (параметр <term>encoding</term>). За заголовком обязательно
		должен следовать один корневой тег
		&mdash; <term>module</term>, который содержит прочие теги и/или текст,
		составляющий код программы. В корневом теге удобно определить все
		пространства имён, которые будут использоваться в программе:</p>
	<code>&lt;dbp:module
    xmlns:dbp="http://dbpager.org.ru/schemas/dbp/3.0"
    xmlns:usr="http://dbpager.org.ru/schemas/dbp/3.0/custom"
>
[код программы]
&lt;/dbp:module></code>
	<p>В данном случае мы определяем имена <term>dbp</term> и <term>usr</term>
		для простраств имён тегов ядра и пользовательских тегов соответственно.</p>
	  <p>Тег <term>dbp:tag</term> при выполнении программы просто объявляет
		пользовательскую функцию с именем <term>sing</term> в пространстве имён
		<term>http://dbpager.org.ru/schemas/dbp/3.0/custom</term>,
		вложенные в него теги при этом не выполняются.
		Следующий за ним тег, <term>dbp:var</term>, инициализирует
		переменную с именем <term>crlf</term> значением перевода строки (CRLF).</p>
	<p>После того, как переменная инициализирована, происходит выполнение
		функции пользователя <term>usr:sing</term>, объявленной ранее. Перед
		выполнением этой функции инициализируется её параметр <term>number</term>
		значением <term>99</term>. При выполнении функции <term>usr:sing</term>
		выполняются все теги, вложенные в тег <term>dbp:tag name="user"</term>.
		Рассмотрим, что при этом происходит.</p>
	<p>В первую очередь, в выходной поток выводится текст:</p>
	<code highlight="off">99 bottles of beer on the wall, 99 bottles of beer.
Take one down, pass it around, 98 bottles of beer on the wall.</code>
	<p>При выводе текста происходит подстановка значения параметра функции и
		заданные вычисления.</p>
	<p>Далее, посредством тега <term>dbp:switch</term> происходит сравнение
		значение параметра, уменьшенного на единицу, с нулём. В случае,
		если это так, (<term>dbp:case match="1"</term>), происходит
		вывод фразы:</p>
	<code highlight="off">Go to the store and buy some more,
99 bottles of beer on the wall.</code>
	<p>В противном случае (<term>dbp:case match="0"</term>), происходит
		рекурсивный вызов функции <term>usr:sing</term>
		с уменьшенным на единицу значением параметра <term>number</term>.</p>
	<p>Таким образом реализуется циклическое выполнение функции
		<term>usr:sing</term>, при этом 99 раз происходит вывод текста песни о пиве
		и при вызове функции в сотый раз выводится финальный куплет песни и выполнение
		программы прекращается.</p>
</section>

</manualpage>

